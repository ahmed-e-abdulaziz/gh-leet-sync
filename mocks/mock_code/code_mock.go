// Code generated by MockGen. DO NOT EDIT.
// Source: code/code.go
//
// Generated by this command:
//
//      mockgen -source=code/code.go
//

// Package mock_code is a generated GoMock package.
package mock_code

import (
        reflect "reflect"

        code "github.com/ahmed-e-abdulaziz/gh-leet-sync/code"
        gomock "go.uber.org/mock/gomock"
)

// MockCodeClient is a mock of CodeClient interface.
type MockCodeClient struct {
        ctrl     *gomock.Controller
        recorder *MockCodeClientMockRecorder
        isgomock struct{}
}

// MockCodeClientMockRecorder is the mock recorder for MockCodeClient.
type MockCodeClientMockRecorder struct {
        mock *MockCodeClient
}

// NewMockCodeClient creates a new mock instance.
func NewMockCodeClient(ctrl *gomock.Controller) *MockCodeClient {
        mock := &MockCodeClient{ctrl: ctrl}
        mock.recorder = &MockCodeClientMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeClient) EXPECT() *MockCodeClientMockRecorder {
        return m.recorder
}

// FetchSubmissions mocks base method.
func (m *MockCodeClient) FetchSubmissions() ([]code.Submission, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FetchSubmissions")
        ret0, _ := ret[0].([]code.Submission)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FetchSubmissions indicates an expected call of FetchSubmissions.
func (mr *MockCodeClientMockRecorder) FetchSubmissions() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSubmissions", reflect.TypeOf((*MockCodeClient)(nil).FetchSubmissions))
}