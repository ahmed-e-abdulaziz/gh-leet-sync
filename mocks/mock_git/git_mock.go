// Code generated by MockGen. DO NOT EDIT.
// Source: git/git.go
//
// Generated by this command:
//
//      mockgen -source=git/git.go
//

// Package mock_git is a generated GoMock package.
package mock_git

import (
        reflect "reflect"
        time "time"

        gomock "go.uber.org/mock/gomock"
)

// MockGitClient is a mock of GitClient interface.
type MockGitClient struct {
        ctrl     *gomock.Controller
        recorder *MockGitClientMockRecorder
        isgomock struct{}
}

// MockGitClientMockRecorder is the mock recorder for MockGitClient.
type MockGitClientMockRecorder struct {
        mock *MockGitClient
}

// NewMockGitClient creates a new mock instance.
func NewMockGitClient(ctrl *gomock.Controller) *MockGitClient {
        mock := &MockGitClient{ctrl: ctrl}
        mock.recorder = &MockGitClientMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitClient) EXPECT() *MockGitClientMockRecorder {
        return m.recorder
}

// Commit mocks base method.
func (m *MockGitClient) Commit(folderName, fileName, code, commitMessage string, timestamp time.Time) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Commit", folderName, fileName, code, commitMessage, timestamp)
        ret0, _ := ret[0].(error)
        return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockGitClientMockRecorder) Commit(folderName, fileName, code, commitMessage, timestamp any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGitClient)(nil).Commit), folderName, fileName, code, commitMessage, timestamp)
}

// Push mocks base method.
func (m *MockGitClient) Push() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Push")
        ret0, _ := ret[0].(error)
        return ret0
}

// Push indicates an expected call of Push.
func (mr *MockGitClientMockRecorder) Push() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockGitClient)(nil).Push))
}
